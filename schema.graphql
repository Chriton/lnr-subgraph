type Domain @entity {
  id: ID!                     # A unique id constructed like "id-{bytecode}"
  registerIndex: Int          # A register index on the minted domain
  owner: User!                # A User or the wrapper contract if it's wrapped.
  domainBytecode: Bytes       # The bytes32 value of the name. Best way to do forensic on it
  domainUtf8: String          # The bytes32 name converted into string. Be aware it's less safe than the bytecode

  primary: Bytes              # Value is an eth address if the user has set a primary eth address
  subRegistrar: Bytes         # Value is an eth address
  content: Bytes              # Value is bytes32

  blockNumber: BigInt         # The block number when the action happened
  reserveDate: BigInt         # Value is a timestamp

  wrapped: Boolean            # True if the token has been wrapped
  wrappedDomainOwner: User    # The owner of the wrapped domain
}

type WrappedDomain @entity {
  id: ID!                     # The ERC-721 tokenId
  owner: User!                # The user that wrapped the domain
  domain: Domain              # The original linagee token
}

type User @entity {
  id: ID!                     # An eth address. Could be a normal user, the wrapper contract, etc. Change it to Address?
  address: Bytes!             # Same value as ID but using Address type for better search
  tokens: [Domain!]! @derivedFrom(field: "owner")
  wrappedTokens: [WrappedDomain!]! @derivedFrom(field: "owner")
}

type Stats @entity {
  id: ID!
  totalRegisters: Int         # When a new domain entity is created we increment this value
  totalWraps: Int             # When a token is wrapped/unwrapped we increment/decrement this value
}
